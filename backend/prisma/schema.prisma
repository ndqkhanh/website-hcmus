generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model answers {
  id         String    @id(map: "answer_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  qid        String    @db.Uuid
  uid        String    @db.Uuid
  content    String?
  correct    Boolean?
  created_at DateTime? @default(now()) @db.Date
  updated_at DateTime? @default(now()) @db.Date
  questions  questions @relation(fields: [qid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "answer_fk_1")
  users      users     @relation(fields: [uid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "answer_fk")
  voting     voting[]
}

model configuration {
  slug  String  @id(map: "configuration_pk")
  value String?
}

model questions {
  id         String    @id(map: "question_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uid        String    @db.Uuid
  content    String?
  status     Int?      @default(0) @db.SmallInt
  created_at DateTime? @default(now()) @db.Date
  updated_at DateTime? @default(now()) @updatedAt @db.Date
  title      String
  users      users     @relation(fields: [uid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "question_fk")
  answers    answers[]

  @@index([title])
}

model users {
  id                String      @id(map: "user_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username          String      @unique(map: "users_un") @db.VarChar
  password          String
  profilepictureurl String?
  role              Int?        @default(2) @db.SmallInt
  name              String?
  disabled          Boolean?    @default(false)
  answers           answers[]
  questions         questions[]
  voting            voting[]

  @@index([username], map: "user_username_idx")
}

model voting {
  id      String   @id(map: "voting_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  aid     String   @db.Uuid
  uid     String   @db.Uuid
  status  Boolean?
  answers answers  @relation(fields: [aid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "voting_fk_1")
  users   users    @relation(fields: [uid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "voting_fk")
}
