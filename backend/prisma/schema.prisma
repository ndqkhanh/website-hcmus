generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                String              @id(map: "users_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role              Int                 @default(2) @db.SmallInt
  email             String              @unique(map: "users_un") @db.VarChar(255)
  password          Bytes
  create_time       DateTime?           @default(now()) @db.Timestamptz(6)
  update_time       DateTime?           @default(now()) @db.Timestamptz(6)
  boid              String?             @db.Uuid
  verification      Boolean             @default(false)
  bus_tickets       bus_tickets[]
  reviews           reviews[]
  user_verification user_verification[]
  bus_operators     bus_operators?      @relation(fields: [boid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_fk")
}

model bus_operators {
  id        String    @id(map: "bus_operators_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  image_url String?
  phone     String?
  name      String
  buses     buses[]
  reviews   reviews[]
  users     users[]

  @@index([name])
}

model bus_stations {
  id                                    String  @id(map: "bus_stations_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                  String
  location                              String
  buses_bus_stationsTobuses_end_point   buses[] @relation("bus_stationsTobuses_end_point")
  buses_bus_stationsTobuses_start_point buses[] @relation("bus_stationsTobuses_start_point")

  @@index([location])
}

model bus_tickets {
  id      String @id(map: "bus_tickets_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bus_id  String @db.Uuid
  user_id String @db.Uuid
  name    String
  phone   String
  seat    String
  status  Int    @default(0) @db.SmallInt
  buses   buses  @relation(fields: [bus_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bus_tickets_fk")
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bus_tickets_fk_2")
}

model buses {
  id                                           String        @id(map: "buses_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bo_id                                        String        @db.Uuid
  start_point                                  String        @db.Uuid
  end_point                                    String        @db.Uuid
  type                                         Int           @db.SmallInt
  start_time                                   DateTime      @db.Timestamptz(6)
  end_time                                     DateTime      @db.Timestamptz(6)
  image_url                                    String
  policy                                       String?
  num_of_seats                                 Int           @db.SmallInt
  price                                        Int
  bus_operators                                bus_operators @relation(fields: [bo_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buses_fk")
  bus_stations_bus_stationsTobuses_end_point   bus_stations  @relation("bus_stationsTobuses_end_point", fields: [end_point], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buses_fk_3")
  bus_stations_bus_stationsTobuses_start_point bus_stations  @relation("bus_stationsTobuses_start_point", fields: [start_point], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buses_fk_2")
  bus_tickets                                  bus_tickets[]

  @@index([price])
}

model reviews {
  id            String        @id(map: "reviews_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment       String
  rate          Int           @db.SmallInt
  user_id       String        @db.Uuid
  bo_id         String        @db.Uuid
  bus_operators bus_operators @relation(fields: [bo_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_fk_2")
  users         users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_fk")
}

model user_verification {
  uid   String @id @db.Uuid
  code  String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users users  @relation(fields: [uid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
